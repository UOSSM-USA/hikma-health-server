name: Deploy to Staging

on:
  push:
    branches:
      - develop
  workflow_dispatch: # Allow manual triggering

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.14.0"
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10
          run_install: false
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install
        
      - name: Run linting
        run: pnpm run lint
        
      - name: Run type checking
        run: pnpm exec tsc --noEmit
        
      - name: Run tests
        run: pnpm test
        
      - name: Build application
        run: pnpm run build
        env:
          NODE_ENV: production
          
  security:
    runs-on: ubuntu-latest
    name: Security Audit
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.14.0"
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10
          run_install: false
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Run security audit
        run: pnpm audit --audit-level moderate
        
  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: [test, security]
    if: success()
    
    environment:
      name: staging
      url: https://ehr-staging.uossm.us
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Render Staging
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_STAGING_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-success: true
          
      - name: Run database migrations
        run: |
          echo "Database migrations will be handled by the start script in Render"
          echo "Migrations are run automatically via: pnpm run start (which includes db:migrate)"
          
      - name: Health check
        run: |
          # Wait a bit for deployment to be ready
          sleep 30
          
          # Basic health check
          curl -f https://ehr-staging.uossm.us/api/health || echo "Health check failed - this is expected if health endpoint doesn't exist yet"
          
      - name: Notify deployment success
        run: |
          echo "üöÄ Staging deployment completed successfully!"
          echo "üìç URL: https://ehr-staging.uossm.us"
          echo "üìä Environment: staging"
          echo "üîÄ Branch: develop"
          echo "üìù Commit: ${{ github.sha }}"
          
      - name: Post deployment notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Staging deployment successful"
          else
            echo "‚ùå Staging deployment failed"
          fi
